<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++字符串比较大小的原理</title>
    <url>/posts/60551/</url>
    <content><![CDATA[<h2 id="问题引出"><a href="#问题引出" class="headerlink" title="问题引出"></a>问题引出</h2><p>笔者在比较两个字符串大小的时候踩过的坑，本意是想利用数值型对应的字符串的形式比较字符串本身的大小，例如：<code>&quot;21&quot; &gt; &quot;111&quot;</code>显然对于数值型的<code>21 &gt; 111</code>】结果肯定为false,但是<code>&quot;21&quot; &gt; &quot;111&quot;</code>的结果为true</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s1 = <span class="string">&quot;21&quot;</span>, s2 = <span class="string">&quot;111&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> n1 = <span class="number">21</span>, n2 = <span class="number">111</span>;</span><br><span class="line">    <span class="keyword">bool</span> res = (n1 &gt; n2);   </span><br><span class="line">    <span class="keyword">bool</span> res1 = (s1 &gt; s2);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;(n1 &gt; n2) = &quot;</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 0</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;(s1 &gt; s2) = &quot;</span> &lt;&lt; res1 &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="字符串比较大小的原理"><a href="#字符串比较大小的原理" class="headerlink" title="字符串比较大小的原理"></a>字符串比较大小的原理</h2><p>首先看下《C++ Primer》这本书中的描述：<img src="https://i.loli.net/2020/12/08/qz53rNOLuHlYWZ4.png" alt="image.png"><br>原理：字符串中第一个相异的字符比较的结果<br>明确以下几点：</p>
<ol>
<li>两个字符串是可以用【&gt;,&lt;,&gt;=,&lt;=】来比较大小的</li>
<li>对于数值型对应的字符串形式，<ul>
<li>两个字符串长度相等的情况下，例如：<code>&quot;12&quot; &lt; &quot;22&quot;</code>，是可以比较出两个字符串对应的原数值型数据的大小关系</li>
<li>两个字符串长度不等的情况下，无法比较出其对应数值型的大小关系，因为比较的结果取决于从左向右遇到的第一个不等的字符。</li>
</ul>
</li>
</ol>
<figure class="highlight c++"><figcaption><span>[]</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s = <span class="string">&quot;21&quot;</span>, s1 = <span class="string">&quot;11&quot;</span>, s2 = <span class="string">&quot;111&quot;</span>; </span><br><span class="line">    <span class="comment">// TODO：长度相等的字符串比较的结果   </span></span><br><span class="line">    <span class="keyword">bool</span> res = (s &gt; s1);   </span><br><span class="line">    <span class="comment">// TODO：长度不等的字符串比较的结果</span></span><br><span class="line">    <span class="keyword">bool</span> res1 = (s &gt; s2);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;(\&quot;21\&quot; &gt; \&quot;11\&quot;) = &quot;</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 1</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;(\&quot;21\&quot; &gt; \&quot;111\&quot;) = &quot;</span> &lt;&lt; res1 &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">(<span class="string">&quot;21&quot;</span> &gt; <span class="string">&quot;11&quot;</span>) = <span class="number">1</span></span><br><span class="line">(<span class="string">&quot;21&quot;</span> &gt; <span class="string">&quot;111&quot;</span>) = <span class="number">1</span></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>编程中踩过的坑</category>
      </categories>
      <tags>
        <tag>string</tag>
      </tags>
  </entry>
  <entry>
    <title>My first blog</title>
    <url>/posts/11206/</url>
    <content><![CDATA[<p>2020年12月6日晚8：52分  周日 主楼实验室 沈阳</p>
<p>在2020年的最后一个月搭建好了个人博客，即将开始博客之旅，将自己的学习笔记，成长轨迹，生活中的点滴，记录在这里。初次搭完博客，还有些许的成就感，当然要完善的地方还有很多，目前而言能够发布文章，以及文章的一些统计功能，还有站点的一些统计功能。一些按钮还未设置好。</p>
<p>博客的主题采用hexo中使用量最多的next主题，重点考虑到用的人多，遇到问题更容易找到解决办法。</p>
<p>新的开始，加油~~~</p>
]]></content>
      <categories>
        <category>成长轨迹</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode842-Split-Array-into-Fibonacci-Sequence</title>
    <url>/posts/30354/</url>
    <content><![CDATA[<!-- TOC -->

<ul>
<li><a href="#%E9%A2%98%E7%9B%AE">题目</a></li>
<li><a href="#%E5%9F%BA%E6%9C%AC%E6%80%9D%E6%83%B3dfs%E5%89%AA%E6%9E%9D">基本思想：dfs+剪枝</a><ul>
<li><a href="#cpp%E7%89%88%E6%9C%AC">cpp版本</a></li>
<li><a href="#python%E7%89%88%E6%9C%AC">python版本</a></li>
</ul>
</li>
</ul>
<!-- /TOC -->
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given a string S of digits, such as S = “123456579”, we can split it into a Fibonacci-like sequence [123, 456, 579].</p>
<p>Formally, a Fibonacci-like sequence is a list F of non-negative integers such that:</p>
<ul>
<li>0 &lt;= F[i] &lt;= 2^31 - 1, (that is, each integer fits a 32-bit signed integer type);</li>
<li>F.length &gt;= 3;</li>
<li>and F[i] + F[i+1] = F[i+2] for all 0 &lt;= i &lt; F.length - 2.</li>
</ul>
<p>Also, note that when splitting the string into pieces, each piece must not have extra leading zeroes, except if the piece is the number 0 itself.</p>
<p>Return any Fibonacci-like sequence split from S, or return [] if it cannot be done.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;123456579&quot;</span><br><span class="line">Output: [123,456,579]</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;11235813&quot;</span><br><span class="line">Output: [1,1,2,3,5,8,13]</span><br></pre></td></tr></table></figure>
<p><strong>Example 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;112358130&quot;</span><br><span class="line">Output: []</span><br><span class="line">Explanation: The task is impossible.</span><br></pre></td></tr></table></figure>
<p><strong>Example 4:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;0123&quot;</span><br><span class="line">Output: []</span><br><span class="line">Explanation: Leading zeroes are not allowed, so &quot;01&quot;, &quot;2&quot;, &quot;3&quot; is not valid.</span><br></pre></td></tr></table></figure>
<p><strong>Example 5:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;1101111&quot;</span><br><span class="line">Output: [110, 1, 111]</span><br><span class="line">Explanation: The output [11, 0, 11, 11] would also be accepted.</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong></p>
<ul>
<li>1 &lt;= S.length &lt;= 200</li>
<li>S contains only digits.</li>
</ul>
<p><strong>题目链接：</strong></p>
<ul>
<li>英文站：<a href="https://leetcode.com/problems/split-array-into-fibonacci-sequence/">https://leetcode.com/problems/split-array-into-fibonacci-sequence/</a></li>
<li>中文站：<a href="https://leetcode-cn.com/problems/split-array-into-fibonacci-sequence/">https://leetcode-cn.com/problems/split-array-into-fibonacci-sequence/</a></li>
</ul>
<h2 id="基本思想：dfs-剪枝"><a href="#基本思想：dfs-剪枝" class="headerlink" title="基本思想：dfs+剪枝"></a>基本思想：dfs+剪枝</h2><ul>
<li>借助dfs考虑每一种情况</li>
<li>并配合剪枝操作，剪枝的思想：如果已处理的数据中，前两个数的和已经比当前数小了，就没有必要继续往后扩增当前数了</li>
<li>关键点：处理下数值越界的情况：<ul>
<li>首先是当前数本身不能超过<code>INT_MAX</code>，具体处理方法见程序，要特别注意：只有当两个字符串长度相等的时候，才能用字符串的形式正确的比较出其对应的数值的大小</li>
<li>再者已处理的数据中前两个数的和不能超过<code>INT_MAX</code>，这里可用强制类型转化处理</li>
</ul>
</li>
</ul>
<h3 id="cpp版本"><a href="#cpp版本" class="headerlink" title="cpp版本"></a>cpp版本</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">splitIntoFibonacci</span><span class="params">(<span class="built_in">string</span> S)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        dfs(S, <span class="number">0</span>, res, &#123;&#125;);</span><br><span class="line">        <span class="keyword">return</span> res;        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="built_in">string</span> S, <span class="keyword">int</span> pos, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;res, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cur)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur.size() &gt; <span class="number">2</span> &amp;&amp; pos == S.length())&#123;</span><br><span class="line">            res = cur;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(S[pos] == <span class="string">&#x27;0&#x27;</span>)&#123;<span class="comment">//当起始位置是0的时候，0只能单独作为一个数</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(cur.size() &lt; <span class="number">2</span> || (cur.size() &gt;= <span class="number">2</span> &amp;&amp; cur[cur.size() - <span class="number">2</span>] + cur[cur.size() - <span class="number">1</span>] == <span class="number">0</span>)) &#123;</span><br><span class="line">                cur.push_back(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">return</span> dfs(S, pos + <span class="number">1</span>, res, cur);</span><br><span class="line">            &#125;</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">string</span> s1 = <span class="string">&quot;2147483647&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = pos; i &lt; S.length() &amp;&amp; !flag; ++i) &#123;</span><br><span class="line">            <span class="built_in">string</span> temp = S.substr(pos, i - pos + <span class="number">1</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// TODO：处理下当前数本身越界的情况</span></span><br><span class="line">            <span class="keyword">if</span>((temp.size() == s1.size() &amp;&amp; temp &gt; s1) || temp.size() &gt; s1.size())&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">                </span><br><span class="line">            </span><br><span class="line">            <span class="keyword">int</span> num = atoi(temp.c_str());</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> pre_2sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(cur.size() &gt;= <span class="number">2</span>)&#123;              </span><br><span class="line">                pre_2sum = (<span class="keyword">long</span> <span class="keyword">long</span>)cur[cur.size() - <span class="number">2</span>] + (<span class="keyword">long</span> <span class="keyword">long</span>)cur[cur.size() - <span class="number">1</span>];</span><br><span class="line">                <span class="comment">//<span class="doctag">TODO:</span>处理下前两个数相加越界的情况</span></span><br><span class="line">                <span class="keyword">if</span>(pre_2sum &gt; INT_MAX)&#123; </span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// TODO：前两个数的和小于当前数，就没有必要继续往下dfs了，因为后面的数只会越来越大</span></span><br><span class="line">                <span class="keyword">if</span>(pre_2sum &lt; num) </span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(cur.size() &lt; <span class="number">2</span> || (cur.size() &gt;= <span class="number">2</span> &amp;&amp; pre_2sum == num)) &#123;</span><br><span class="line">                cur.push_back(num);</span><br><span class="line">                flag = dfs(S, i + <span class="number">1</span>, res, cur);</span><br><span class="line">                cur.pop_back();</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="python版本"><a href="#python版本" class="headerlink" title="python版本"></a>python版本</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">splitIntoFibonacci</span>(<span class="params">self, S: <span class="built_in">str</span></span>) -&gt; List[int]:</span></span><br><span class="line">        res = []</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">pos: <span class="built_in">int</span></span>) -&gt; bool:</span></span><br><span class="line">            <span class="keyword">if</span> pos == <span class="built_in">len</span>(S):</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">len</span>(res) &gt;= <span class="number">3</span></span><br><span class="line">            </span><br><span class="line">         </span><br><span class="line">            <span class="comment"># if S[pos] == &#x27;0&#x27;:</span></span><br><span class="line">            <span class="comment">#     if len(res) &lt; 2 or (len(res) &gt;= 2 and res[-2] + res[-1] == 0):</span></span><br><span class="line">            <span class="comment">#         res.append(0)</span></span><br><span class="line">            <span class="comment">#         return dfs(pos + 1)</span></span><br><span class="line">            <span class="comment">#     else:</span></span><br><span class="line">            <span class="comment">#         return False</span></span><br><span class="line">            </span><br><span class="line">            s1 = <span class="string">&quot;2147483647&quot;</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(pos, <span class="built_in">len</span>(S)):</span><br><span class="line">                <span class="keyword">if</span> i &gt; pos <span class="keyword">and</span> S[pos] == <span class="string">&quot;0&quot;</span>: <span class="comment">## 处理以0开头的情况，不知道为什么上面的处理方法用python来实现就不行呢！！</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                temp = S[pos : i + <span class="number">1</span>]</span><br><span class="line">                num = <span class="built_in">int</span>(temp)</span><br><span class="line">                print(temp)</span><br><span class="line">                <span class="keyword">if</span> num &gt; <span class="number">2147483647</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                </span><br><span class="line">                pre_2sum = <span class="number">0</span></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(res) &gt;= <span class="number">2</span>:</span><br><span class="line">                    pre_2sum = res[-<span class="number">1</span>] + res[-<span class="number">2</span>]</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">if</span> pre_2sum &gt; <span class="number">2147483647</span>:</span><br><span class="line">                        <span class="keyword">break</span>                    </span><br><span class="line">                    <span class="keyword">if</span> pre_2sum &lt; num:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                        </span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(res) &lt; <span class="number">2</span> <span class="keyword">or</span> (<span class="built_in">len</span>(res) &gt;= <span class="number">2</span> <span class="keyword">and</span> pre_2sum == num):</span><br><span class="line">                    res.append(num)</span><br><span class="line">                    <span class="keyword">if</span> dfs(i + <span class="number">1</span>):</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                    res.pop()</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        dfs(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">                    </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>dfs</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode861.Score After Flipping Matrix</title>
    <url>/posts/12814/</url>
    <content><![CDATA[<!-- TOC -->

<ul>
<li><a href="#%E9%A2%98%E7%9B%AE">题目</a></li>
<li><a href="#%E5%9F%BA%E6%9C%AC%E6%80%9D%E6%83%B3%E8%B4%AA%E5%BF%83">基本思想：贪心</a><ul>
<li><a href="#cpp%E7%89%88%E6%9C%AC">cpp版本</a></li>
<li><a href="#python%E7%89%88%E6%9C%AC">python版本</a></li>
</ul>
</li>
</ul>
<!-- /TOC -->

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>We have a two dimensional matrix A where each value is 0 or 1.</p>
<p>A move consists of choosing any row or column, and toggling each value in that row or column: changing all 0s to 1s, and all 1s to 0s.</p>
<p>After making any number of moves, every row of this matrix is interpreted as a binary number, and the score of the matrix is the sum of these numbers.</p>
<p>Return the highest possible score.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Input: [[<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>],[<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>]]</span><br><span class="line">Output: <span class="number">39</span></span><br><span class="line">Explanation:</span><br><span class="line">Toggled to [[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]].</span><br><span class="line"><span class="number">0b1111</span> + <span class="number">0b1001</span> + <span class="number">0b1111</span> = <span class="number">15</span> + <span class="number">9</span> + <span class="number">15</span> = <span class="number">39</span></span><br></pre></td></tr></table></figure>

<p><strong>Note:</strong></p>
<ul>
<li>1 &lt;= A.length &lt;= 20</li>
<li>1 &lt;= A[0].length &lt;= 20</li>
<li>A[i][j] is 0 or 1.</li>
</ul>
<h2 id="基本思想：贪心"><a href="#基本思想：贪心" class="headerlink" title="基本思想：贪心"></a>基本思想：贪心</h2><p>首先明确一点：对于最终的结果而言，每一行每一列翻转的顺序对最终结果没有影响，即得到最优结果的最后一步是翻转第一行，那么最先翻转第一行和最后翻转第一行对最终的结果没有任何影响。</p>
<p>基于上述思想：</p>
<ul>
<li>为了保证最终的结果最大，首先将第一列全部处理成1，也就是将第一列不是1的行进行翻转</li>
<li>除第一列外的其他列，如果当前列1的个数大于0的个数则进行翻转，同时记录该列的结果</li>
</ul>
<h3 id="cpp版本"><a href="#cpp版本" class="headerlink" title="cpp版本"></a>cpp版本</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">matrixScore</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; A)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO：首先将第一列通过行翻转都转化成 1</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.size(); ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(A[i][<span class="number">0</span>] == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; A[i].size(); ++j)&#123;</span><br><span class="line">                    A[i][j] = !A[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// TODO：初始化为第一列的结果</span></span><br><span class="line">        <span class="keyword">int</span> res = <span class="built_in">pow</span>(<span class="number">2</span>, A[<span class="number">0</span>].size() - <span class="number">1</span>) * A.size();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// TODO：单独处理每一列,只需保证每一列中的1的个数大于0的个数即可, 并不是真的翻转，只是保存每列的每个元素的得分</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; A[<span class="number">0</span>].size(); ++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; A.size(); ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(A[j][i])</span><br><span class="line">                    ++cnt;</span><br><span class="line">            &#125;</span><br><span class="line">            res += <span class="built_in">pow</span>(<span class="number">2</span>, A[<span class="number">0</span>].size() - i - <span class="number">1</span>) * max(cnt, <span class="keyword">int</span>(A.size() - cnt));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="python版本"><a href="#python版本" class="headerlink" title="python版本"></a>python版本</h3><ul>
<li>说明：代码和cpp版本稍微有一点区别，未将第一列单独处理</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">matrixScore</span>(<span class="params">self, A: List[List[<span class="built_in">int</span>]]</span>) -&gt; int:</span></span><br><span class="line">        row = <span class="built_in">len</span>(A)</span><br><span class="line">        col = <span class="built_in">len</span>(A[<span class="number">0</span>])</span><br><span class="line">        res = <span class="built_in">pow</span>(<span class="number">2</span>, col - <span class="number">1</span>) * row</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(col):</span><br><span class="line">            <span class="keyword">if</span> i:</span><br><span class="line">                <span class="comment"># <span class="doctag">TODO:</span>统计该列中1的个数，注意看下对应的该行元素是否为1来决定该行是否被翻转过</span></span><br><span class="line">                cnt = <span class="number">0</span></span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(row):</span><br><span class="line">                    <span class="keyword">if</span> A[j][i] == A[j][<span class="number">0</span>] :</span><br><span class="line">                        cnt += <span class="number">1</span></span><br><span class="line">                res += <span class="built_in">pow</span>(<span class="number">2</span>, col - i - <span class="number">1</span>) * <span class="built_in">max</span>(cnt, row - cnt)</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>贪心算法</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客说明文档</title>
    <url>/posts/44808/</url>
    <content><![CDATA[<!-- TOC -->

<ul>
<li><a href="#%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%A4%B9%E8%AF%B4%E6%98%8E">本地文件夹说明</a></li>
<li><a href="#hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4">hexo常用命令</a></li>
<li><a href="#%E4%B8%BAgithub%E4%BB%93%E5%BA%93%E6%B7%BB%E5%8A%A0readme">为github仓库添加readme</a></li>
<li><a href="#%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E6%A0%87%E7%AD%BE%E5%85%B3%E4%BA%8E">添加分类、标签、关于</a></li>
<li><a href="#%E6%B7%BB%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD">添加搜索功能</a></li>
<li><a href="#%E4%BF%AE%E6%94%B9%E6%96%87%E7%AB%A0%E5%86%85%E9%93%BE%E6%8E%A5%E6%96%87%E6%9C%AC%E6%A0%B7%E5%BC%8F">修改文章内链接文本样式</a></li>
<li><a href="#%E4%BF%AE%E6%94%B9%E6%96%87%E7%AB%A0%E9%93%BE%E6%8E%A5">修改文章链接</a></li>
</ul>
<!-- /TOC -->
<h2 id="本地文件夹说明"><a href="#本地文件夹说明" class="headerlink" title="本地文件夹说明"></a>本地文件夹说明</h2><ul>
<li>public：该文件夹最终会被push到github仓库中</li>
<li>source：存放用户资源的地方。<ul>
<li>_posts文件夹中的markdown文档会被解析成html文件并放到public文件夹</li>
<li>除_posts文件及外，其余以【_】开头的文件或文件夹都会被忽略</li>
<li>其余文件（例如：about文件）会被拷贝到public文件夹</li>
</ul>
</li>
</ul>
<ul>
<li>scafflods：模板文件夹。新建markdown文件时，hexo会根据该文件夹下的模板来建立文件<ul>
<li>post.md：新建文章<code>hexo new &quot;文章名&quot;</code>时，会按照该文件中的内容生成默认文件</li>
<li>也可以自己定义模板，例如模板名为blog，新建文章时，为了使用该模板，键入命令<code>hexo new blog &quot;文章名&quot;</code></li>
</ul>
</li>
</ul>
<h2 id="hexo常用命令"><a href="#hexo常用命令" class="headerlink" title="hexo常用命令"></a>hexo常用命令</h2><p>说明：笔者的博客目录名为blog</p>
<ul>
<li><code>hexo new &quot;文章名&quot;</code>：新建文章，在blog文件的路径下键入，最终会在blog/source/_posts文件夹下出现新建的文件</li>
<li><code>hexo g</code>：生成静态页面至public文件夹下：在blog文件夹下键入，它是<code>hexo generate</code>的缩写</li>
<li><code>hexo s</code>：开启本地预览端口，在blog文件夹下键入，它是<code>hexo server</code>的缩写</li>
<li><code>hexo d</code>：部署到github：在blog文件夹下键入，它是<code>hexo deploy</code>的缩写</li>
<li><code>hexo help</code>：查看帮助</li>
<li><code>hexo version</code>：查看hexo版本</li>
</ul>
<p>组合命令：</p>
<ul>
<li><code>hexo s -g</code>：生成静态页面并本地预览</li>
<li><code>hexo d -g</code>：生成静态页面并部署到github</li>
</ul>
<h2 id="为github仓库添加readme"><a href="#为github仓库添加readme" class="headerlink" title="为github仓库添加readme"></a>为github仓库添加readme</h2><p>因为source中的文件会被拷贝到public文件夹中，而public文件夹会被push到github中，因此想为github仓库添加readme，只需在source文件夹中创建即可。<br>注意：source文件夹中的【.md】文档会被解析成html文件，再放到public中。为了避免解析，将readme的扩展名改为【.MDWN】(这里一定要大写，小写的话也会被解析成html文件)</p>
<h2 id="添加分类、标签、关于"><a href="#添加分类、标签、关于" class="headerlink" title="添加分类、标签、关于"></a>添加分类、标签、关于</h2><ul>
<li>首先将站点配置文件中的menu下面的categories和tags前的【#】去掉<img src="https://i.loli.net/2020/12/07/JCdtcQwxAYfT7MX.png" alt="image.png"></li>
<li>创建markdown文件<img src="https://i.loli.net/2020/12/07/DQ5aXjgtFGw83Ey.png" alt="image.png"><ul>
<li>在blog文件夹下键入<code>hexo new page tags</code>，此时会生成blog/source/tags/index.md文件</li>
<li>修改index.md文件，添加【type:”tags”】<img src="https://i.loli.net/2020/12/07/ZUySVMFOIDATw2J.png" alt="image.png"></li>
</ul>
</li>
</ul>
<ul>
<li>在blog文件夹下键入<code>hexo new page categories</code>，此时会生成blog/source/categories/index.md</li>
<li>修改index.md文件，添加【type:”categories”】<img src="https://i.loli.net/2020/12/07/iPwaHA5jQmIVreM.png" alt="image.png"></li>
</ul>
<p>about也是采用同样的方法，就不再赘述了</p>
<h2 id="添加搜索功能"><a href="#添加搜索功能" class="headerlink" title="添加搜索功能"></a>添加搜索功能</h2><p>参考链接：<a href="https://www.jianshu.com/p/3a05351a37dc">https://www.jianshu.com/p/3a05351a37dc</a></p>
<ol>
<li><p>在 blog 文件夹下执行命令<code>npm install hexo-generator-searchdb --save</code></p>
</li>
<li><p>修改站点配置文件，在Extension下添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 搜索</span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure></li>
<li><p>修改主题配置文件，找到 Local search，将 enable 设置为 <code>true</code></p>
</li>
</ol>
<h2 id="修改文章内链接文本样式"><a href="#修改文章内链接文本样式" class="headerlink" title="修改文章内链接文本样式"></a>修改文章内链接文本样式</h2><p>参考链接：<a href="https://www.jianshu.com/p/3a05351a37dc">https://www.jianshu.com/p/3a05351a37dc</a></p>
<p>打开文件<code>blog\themes\next\source\css\_common\components\post\post.styl</code>，在末尾添加：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.post-body p a &#123;</span><br><span class="line">  color: #0593d3;</span><br><span class="line">  border-bottom: none;</span><br><span class="line">  border-bottom: 1px solid #0593d3;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    color: #fc6423;</span><br><span class="line">    border-bottom: none;</span><br><span class="line">    border-bottom: 1px solid #fc6423;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="修改文章链接"><a href="#修改文章链接" class="headerlink" title="修改文章链接"></a>修改文章链接</h2><p>参考链接：<a href="https://blog.csdn.net/as480133937/article/details/100138838">https://blog.csdn.net/as480133937/article/details/100138838</a><br>文章链接默认的生成规则<code>:year/:month/:day/:title</code>，生成的样式<code>https://crystal1213.github.io/2020/12/07/leetcode861-Score-After-Flipping-Matrix/</code></p>
<a id="more"></a>]]></content>
      <categories>
        <category>工具使用说明</category>
      </categories>
      <tags>
        <tag>工具说明</tag>
      </tags>
  </entry>
</search>
