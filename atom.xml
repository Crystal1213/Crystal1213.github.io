<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Crystal_Blog</title>
  
  <subtitle>记录学习的点滴</subtitle>
  <link href="https://crystal1213.github.io/atom.xml" rel="self"/>
  
  <link href="https://crystal1213.github.io/"/>
  <updated>2020-12-07T03:12:17.555Z</updated>
  <id>https://crystal1213.github.io/</id>
  
  <author>
    <name>Crystal</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>leetcode861.Score After Flipping Matrix</title>
    <link href="https://crystal1213.github.io/2020/12/07/leetcode861-Score-After-Flipping-Matrix/"/>
    <id>https://crystal1213.github.io/2020/12/07/leetcode861-Score-After-Flipping-Matrix/</id>
    <published>2020-12-07T01:38:10.000Z</published>
    <updated>2020-12-07T03:12:17.555Z</updated>
    
    <content type="html"><![CDATA[<!-- TOC -->autoauto- [题目： leetcode861.Score After Flipping Matrix（861. 翻转矩阵后的得分）](#题目-leetcode861score-after-flipping-matrix861-翻转矩阵后的得分)autoauto<!-- /TOC --><h2 id="题目：-leetcode861-Score-After-Flipping-Matrix（861-翻转矩阵后的得分）"><a href="#题目：-leetcode861-Score-After-Flipping-Matrix（861-翻转矩阵后的得分）" class="headerlink" title="题目： leetcode861.Score After Flipping Matrix（861. 翻转矩阵后的得分）"></a>题目： leetcode861.Score After Flipping Matrix（861. 翻转矩阵后的得分）</h2><p>We have a two dimensional matrix A where each value is 0 or 1.</p><p>A move consists of choosing any row or column, and toggling each value in that row or column: changing all 0s to 1s, and all 1s to 0s.</p><p>After making any number of moves, every row of this matrix is interpreted as a binary number, and the score of the matrix is the sum of these numbers.</p><p>Return the highest possible score.</p><p><strong>Example 1:</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: [[<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>],[<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>]]</span><br><span class="line">Output: <span class="number">39</span></span><br><span class="line">Explanation:</span><br><span class="line">Toggled to [[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]].</span><br><span class="line"><span class="number">0b1111</span> + <span class="number">0b1001</span> + <span class="number">0b1111</span> = <span class="number">15</span> + <span class="number">9</span> + <span class="number">15</span> = <span class="number">39</span></span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ul><li>1 &lt;= A.length &lt;= 20</li><li>1 &lt;= A[0].length &lt;= 20</li><li>A[i][j] is 0 or 1.</li></ul><h2 id="基本思想：贪心"><a href="#基本思想：贪心" class="headerlink" title="基本思想：贪心"></a>基本思想：贪心</h2><p>首先明确一点：对于最终的结果而言，每一行每一列翻转的顺序对最终结果没有影响，即得到最优结果的最后一步是翻转第一行，那么最先翻转第一行和最后翻转第一行对最终的结果没有任何影响。</p><p>基于上述思想：</p><ul><li>为了保证最终的结果最大，首先将第一列全部处理成1，也就是将第一列不是1的行进行翻转</li><li>除第一列外的其他列，如果当前列1的个数大于0的个数则进行翻转，同时记录该列的结果</li></ul><h5 id="1-cpp版本"><a href="#1-cpp版本" class="headerlink" title="1.cpp版本"></a>1.cpp版本</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">matrixScore</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; A)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO：首先将第一列通过行翻转都转化成 1</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.size(); ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(A[i][<span class="number">0</span>] == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; A[i].size(); ++j)&#123;</span><br><span class="line">                    A[i][j] = !A[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// TODO：初始化为第一列的结果</span></span><br><span class="line">        <span class="keyword">int</span> res = <span class="built_in">pow</span>(<span class="number">2</span>, A[<span class="number">0</span>].size() - <span class="number">1</span>) * A.size();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// TODO：单独处理每一列,只需保证每一列中的1的个数大于0的个数即可, 并不是真的翻转，只是保存每列的每个元素的得分</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; A[<span class="number">0</span>].size(); ++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; A.size(); ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(A[j][i])</span><br><span class="line">                    ++cnt;</span><br><span class="line">            &#125;</span><br><span class="line">            res += <span class="built_in">pow</span>(<span class="number">2</span>, A[<span class="number">0</span>].size() - i - <span class="number">1</span>) * max(cnt, <span class="keyword">int</span>(A.size() - cnt));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="color-blue-2-python版本"><a href="#color-blue-2-python版本" class="headerlink" title="$\color{blue}{2.python版本}$"></a>$\color{blue}{2.python版本}$</h5><ul><li>说明：代码和cpp版本稍微有一点区别，未将第一列单独处理</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">matrixScore</span>(<span class="params">self, A: List[List[<span class="built_in">int</span>]]</span>) -&gt; int:</span></span><br><span class="line">        row = <span class="built_in">len</span>(A)</span><br><span class="line">        col = <span class="built_in">len</span>(A[<span class="number">0</span>])</span><br><span class="line">        res = <span class="built_in">pow</span>(<span class="number">2</span>, col - <span class="number">1</span>) * row</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(col):</span><br><span class="line">            <span class="keyword">if</span> i:</span><br><span class="line">                <span class="comment"># <span class="doctag">TODO:</span>统计该列中1的个数，注意看下对应的该行元素是否为1来决定该行是否被翻转过</span></span><br><span class="line">                cnt = <span class="number">0</span></span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(row):</span><br><span class="line">                    <span class="keyword">if</span> A[j][i] == A[j][<span class="number">0</span>] :</span><br><span class="line">                        cnt += <span class="number">1</span></span><br><span class="line">                res += <span class="built_in">pow</span>(<span class="number">2</span>, col - i - <span class="number">1</span>) * <span class="built_in">max</span>(cnt, row - cnt)</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">861. 翻转矩阵后的得分</summary>
    
    
    
    <category term="算法" scheme="https://crystal1213.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="贪心" scheme="https://crystal1213.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>My first blog</title>
    <link href="https://crystal1213.github.io/2020/12/06/hello-world/"/>
    <id>https://crystal1213.github.io/2020/12/06/hello-world/</id>
    <published>2020-12-06T12:47:47.000Z</published>
    <updated>2020-12-06T13:04:13.119Z</updated>
    
    <content type="html"><![CDATA[<p>2020年12月6日晚8：52分  周日 主楼实验室 沈阳</p><p>在2020年的最后一个月搭建好了个人博客，即将开始博客之旅，将自己的学习笔记，成长轨迹，生活中的点滴，记录在这里。初次搭完博客，还有些许的成就感，当然要完善的地方还有很多，目前而言能够发布文章，以及文章的一些统计功能，还有站点的一些统计功能。一些按钮还未设置好。</p><p>博客的主题采用hexo中使用量最多的next主题，重点考虑到用的人多，遇到问题更容易找到解决办法。</p><p>新的开始，加油~~~</p>]]></content>
    
    
    <summary type="html">搭建好站点后，开始第一篇博客！</summary>
    
    
    
    <category term="成长轨迹" scheme="https://crystal1213.github.io/categories/%E6%88%90%E9%95%BF%E8%BD%A8%E8%BF%B9/"/>
    
    
    <category term="随笔" scheme="https://crystal1213.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
